# –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∞–∫—Ü–∏–∑–∞ —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª–µ–π
EXCISE_RATE_PER_KW = 1740  # 1740 —Ä—É–±–ª–µ–π –∑–∞ 0.75 –∫–í—Ç
KW_PER_UNIT = 0.75

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∞–∫—Ü–∏–∑–∞ —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª–µ–π
def calculate_excise_electric(power_kw: float) -> float:
    """–†–∞—Å—á–µ—Ç –∞–∫—Ü–∏–∑–∞ –¥–ª—è —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª–µ–π –ø–æ –∞–∫—Ç—É–∞–ª—å–Ω—ã–º —Å—Ç–∞–≤–∫–∞–º 2025 –≥–æ–¥–∞"""
    return (power_kw / KW_PER_UNIT) * EXCISE_RATE_PER_KW

# –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
async def calculate_and_send_result(message: types.Message, state: FSMContext, data: dict, is_individual: bool, is_personal_use: bool):
    try:
        rates = get_currency_rates()
        price_rub = data['price'] * rates['CNY']
        eur_rate = rates['EUR']
        
        is_electric = data.get('engine_type') == "üîã –≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π"
        engine_volume_cc = data.get('engine_volume_cc', 0) if not is_electric else 0
        
        # –î–ª—è —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª–µ–π - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –∫–í—Ç –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∞–∫—Ü–∏–∑–∞
        if is_electric:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—É—é –º–æ—â–Ω–æ—Å—Ç—å –≤ –∫–í—Ç
            power_kw = data.get('engine_power', 0)
            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ –ª.—Å. —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            engine_power_hp = power_kw * 1.35962
            
            # –ê–∫—Ü–∏–∑ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ –∏—Å—Ö–æ–¥–Ω—ã–º –∫–í—Ç!
            excise = calculate_excise_electric(power_kw)
        else:
            # –î–ª—è –î–í–° - –º–æ—â–Ω–æ—Å—Ç—å —É–∂–µ –≤ –ª.—Å.
            engine_power_hp = data.get('engine_power', 0)
            # –ê–∫—Ü–∏–∑ —Ç–æ–ª—å–∫–æ –¥–ª—è —é—Ä–ª–∏—Ü
            excise = calculate_excise(engine_power_hp) if not is_individual else 0
        
        duty = calculate_duty(price_rub, data['age_months'], engine_volume_cc, 
                             is_individual, eur_rate, is_electric, is_personal_use)
        
        recycling = calculate_recycling(data['age_months'], engine_volume_cc, 
                                      is_individual, is_personal_use, is_electric)
        
        vat_base = price_rub + duty + excise
        vat = vat_base * 0.2 if (is_electric or not is_individual) else 0
        
        total = price_rub + duty + recycling + vat + excise + DELIVERY_COST + CUSTOMS_CLEARANCE
        
        years = data['age_months'] // 12
        months = data['age_months'] % 12
        age_str = f"{years} –≥. {months} –º–µ—Å." if months else f"{years} –ª–µ—Ç"
        
        importer_type = "–§–∏–∑–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ" if is_individual else "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ"
        if is_individual:
            purpose = "–ª–∏—á–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ" if is_personal_use else "–ø–µ—Ä–µ–ø—Ä–æ–¥–∞–∂–∞"
            importer_type += f" ({purpose})"
        
        result = (
            f"üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á–µ—Ç–∞</b> (–∞–∫—Ç—É–∞–ª—å–Ω–æ –Ω–∞ {datetime.now().strftime('%d.%m.%Y')}):\n\n"
            f"üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ:</b> {format_number(data['price'])} CNY ({format_number(price_rub)} —Ä—É–±.)\n"
            f"üìà <b>–ö—É—Ä—Å—ã:</b> CNY: {rates['CNY']:.2f} —Ä—É–±., EUR: {rates['EUR']:.2f} —Ä—É–±.\n"
            f"‚è≥ <b>–î–∞—Ç–∞ –≤—ã–ø—É—Å–∫–∞:</b> {data['year_month'][0]:.0f}.{data['year_month'][1]:.0f} ({age_str})\n"
            f"üîã <b>–¢–∏–ø –¥–≤–∏–≥–∞—Ç–µ–ª—è:</b> {data['engine_type']}\n"
        )
        
        if data['engine_type'] in ["üõ¢Ô∏è –ë–µ–Ω–∑–∏–Ω–æ–≤—ã–π", "‚õΩ –î–∏–∑–µ–ª—å–Ω—ã–π"]:
            result += f"üîß <b>–û–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è:</b> {format_engine_volume(engine_volume_cc)}\n"
            result += f"‚ö° <b>–ú–æ—â–Ω–æ—Å—Ç—å –¥–≤–∏–≥–∞—Ç–µ–ª—è:</b> {data.get('engine_power', 0)} –ª.—Å.\n"
        else:
            # –î–ª—è —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª–µ–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏ –∫–í—Ç, –∏ –ª.—Å.
            result += f"‚ö° <b>–ú–æ—â–Ω–æ—Å—Ç—å –¥–≤–∏–≥–∞—Ç–µ–ª—è:</b> {data.get('engine_power', 0)} –∫–í—Ç ({engine_power_hp:.1f} –ª.—Å.)\n"
        
        result += f"üë§ <b>–ò–º–ø–æ—Ä—Ç–µ—Ä:</b> {importer_type}\n\n"
        result += f"üìù <b>–¢–∞–º–æ–∂–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏:</b>\n"
        result += f"- –ü–æ—à–ª–∏–Ω–∞: {format_number(duty)} —Ä—É–±.\n"
        
        if is_electric and excise > 0:
            result += f"- –ê–∫—Ü–∏–∑: {format_number(excise)} —Ä—É–±. ({EXCISE_RATE_PER_KW} —Ä—É–±./{KW_PER_UNIT} –∫–í—Ç)\n"
        elif not is_electric and not is_individual and excise > 0:
            result += f"- –ê–∫—Ü–∏–∑: {format_number(excise)} —Ä—É–±.\n"
        
        if vat > 0:
            result += f"- –ù–î–° (20%): {format_number(vat)} —Ä—É–±.\n"
        
        result += f"- –£—Ç–∏–ª—å—Å–±–æ—Ä: {format_number(recycling)} —Ä—É–±.\n"
        
        result += (
            f"\nüöö <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:</b>\n"
            f"- –î–æ—Å—Ç–∞–≤–∫–∞ –¥–æ –£—Å—Å—É—Ä–∏–π—Å–∫–∞: {format_number(DELIVERY_COST)} —Ä—É–±.\n"
            f"- –¢–∞–º–æ–∂–µ–Ω–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ: {format_number(CUSTOMS_CLEARANCE)} —Ä—É–±.\n\n"
            f"üíµ <b>–ò–¢–û–ì–û –∫ –æ–ø–ª–∞—Ç–µ:</b> {format_number(total)} —Ä—É–±.\n\n"
            f"<a href='{SITE_URL}'>–° —É–≤–∞–∂–µ–Ω–∏–µ–º, –ê–≤—Ç–æ –ó–∞–∫–∞–∑ –î–í</a>\n\n"
            f"<a href='{TELEGRAM_URL}'>üì© –ó–∞–∫–∞–∑–∞—Ç—å –∞–≤—Ç–æ</a>\n"
            f"<a href='{GUAZI_URL}'>üîç –ü–æ–∏—Å–∫ –∞–≤—Ç–æ –Ω–∞ Guazi.com</a>"
        )
        
        if is_electric and is_individual and is_personal_use:
            result += "\n\n‚ÑπÔ∏è <i>–î–ª—è —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª–µ–π —Ñ–∏–∑–ª–∏—Ü: –ª—å–≥–æ—Ç–Ω—ã–π —É—Ç–∏–ª—å—Å–±–æ—Ä –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –ø—Ä–∏ —É—Å–ª–æ–≤–∏—è—Ö: "
            result += "1 –∞–≤—Ç–æ –≤ –≥–æ–¥, –±–µ–∑ –ø—Ä–æ–¥–∞–∂–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 12 –º–µ—Å—è—Ü–µ–≤</i>"
        elif is_electric:
            result += "\n\n‚ÑπÔ∏è <i>–î–ª—è —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª–µ–π: –∞–∫—Ü–∏–∑ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –ª—é–±–æ–π –º–æ—â–Ω–æ—Å—Ç–∏, –ù–î–° 20% –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –≤—Å–µ—Ö</i>"
        elif not is_individual:
            result += "\n\n‚ÑπÔ∏è <i>–î–ª—è –î–í–° —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –ª–∏—Ü: —É—á—Ç–µ–Ω—ã –ø–æ—à–ª–∏–Ω–∞, –∞–∫—Ü–∏–∑, –ù–î–° –∏ —É—Ç–∏–ª—å—Å–±–æ—Ä</i>"
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.info(f"–î–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {len(result)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        await message.answer(result, parse_mode="HTML", reply_markup=main_menu())
        
        site_info = (
            "–° —É–≤–∞–∂–µ–Ω–∏–µ–º, –ê–≤—Ç–æ –ó–∞–∫–∞–∑ –î–í\n\n"
            f"<a href='{TELEGRAM_URL}'>- –ó–∞–∫–∞–∑–∞—Ç—å –∞–≤—Ç–æ</a>\n"
            f"<a href='{SITE_URL}'>autozakaz-dv.ru</a>\n"
            "–ì–ª–∞–≤–Ω–∞—è"
        )
        
        # –í—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ç–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        # await message.answer_photo(
        #     photo=SITE_IMAGE_URL,
        #     caption=site_info,
        #     parse_mode="HTML"
        # )
        
        await state.clear()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ calculate_and_send_result: {e}", exc_info=True)
        logger.error(f"–î–∞–Ω–Ω—ã–µ —Ä–∞—Å—á–µ—Ç–∞: {data}")
        logger.error(f"–¢–∏–ø –∏–º–ø–æ—Ä—Ç–µ—Ä–∞: {is_individual}, –¶–µ–ª—å: {is_personal_use}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        await state.clear()
