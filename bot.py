import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.enums import ChatMemberStatus
from datetime import datetime
import requests
from bs4 import BeautifulSoup, SoupStrainer
from dotenv import load_dotenv
import os
import re
from xml.etree import ElementTree as ET

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("bot.log", encoding='utf-8'),
        logging.StreamHandler()
    ]
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
DELIVERY_COST = 165000  # –î–æ—Å—Ç–∞–≤–∫–∞ –∏–∑ –ö–∏—Ç–∞—è
CUSTOMS_CLEARANCE = 80000  # –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ
SITE_URL = "https://autozakaz-dv.ru/"
TELEGRAM_URL = "https://t.me/autozakazdv"
GUAZI_URL = "https://www.guazi.com"
BASE_RECYCLING_FEE_INDIVIDUAL = 20000  # –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞ –¥–ª—è —Ñ–∏–∑–ª–∏—Ü
BASE_RECYCLING_FEE_LEGAL = 150000  # –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞ –¥–ª—è —é—Ä–ª–∏—Ü
BASE_EXCISE_RATE = 61  # —Ä—É–±/–ª.—Å. –¥–ª—è –±–µ–Ω–∑–∏–Ω–æ–≤—ã—Ö –∞–≤—Ç–æ
CHANNEL_ID = -1002265390233  # ID –∫–∞–Ω–∞–ª–∞ https://t.me/auto_v_kitae

# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª–µ–π
ELECTRIC_DUTY_RATE = 0.15  # 15% –ø–æ—à–ª–∏–Ω–∞ –¥–ª—è —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª–µ–π 
BASE_RECYCLING_FEE_ELECTRIC_INDIVIDUAL_NEW = 3400  # –î–ª—è —Ñ–∏–∑–ª–∏—Ü (–Ω–æ–≤—ã–µ) 
BASE_RECYCLING_FEE_ELECTRIC_INDIVIDUAL_OLD = 5200  # –î–ª—è —Ñ–∏–∑–ª–∏—Ü (—Å—Ç–∞—Ä—à–µ 3 –ª–µ—Ç) 
BASE_RECYCLING_FEE_ELECTRIC_LEGAL_NEW = 667400  # –î–ª—è —é—Ä–ª–∏—Ü (–Ω–æ–≤—ã–µ) 
BASE_RECYCLING_FEE_ELECTRIC_LEGAL_OLD = 1174000  # –î–ª—è —é—Ä–ª–∏—Ü (—Å—Ç–∞—Ä—à–µ 3 –ª–µ—Ç) 

# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∞–∫—Ü–∏–∑–Ω—ã–µ —Å—Ç–∞–≤–∫–∏ –¥–ª—è —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª–µ–π (2025)
EXCISE_RATES_ELECTRIC = {
    (0, 90): 0,
    (90, 150): 49,     # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
    (150, 200): 492,   # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
    (200, 300): 804,   # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
    (300, 400): 1369,  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
    (400, 500): 1418,  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
    (500, float('inf')): 1466  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
}

# URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–∞–π—Ç–∞ (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π)
SITE_IMAGE_URL = "https://autozakaz-dv.ru/local/templates/autozakaz/images/logo_header.png"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞
class Form(StatesGroup):
    price = State()
    year_month = State()
    engine_type = State()   # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ç–∏–ø–∞ –¥–≤–∏–≥–∞—Ç–µ–ª—è
    engine_volume = State()  # –î–ª—è –î–í–°: –æ–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è
    engine_power = State()  # –î–ª—è —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª–µ–π: –º–æ—â–Ω–æ—Å—Ç—å –≤ –∫–í—Ç
    importer_type = State()
    personal_use = State()  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ü–µ–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def start_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="START")]
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )

def main_menu():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üöó –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ")],
            [KeyboardButton(text="üìä –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç"), KeyboardButton(text="‚ÑπÔ∏è –û –±–æ—Ç–µ")]
        ],
        resize_keyboard=True
    )

def importer_type_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üë§ –§–∏–∑–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ"), KeyboardButton(text="üè¢ –Æ—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ")],
            [KeyboardButton(text="‚Ü© –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )

def personal_use_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚úÖ –î–ª—è –ª–∏—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"), KeyboardButton(text="üí∞ –î–ª—è –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–∂–∏")],
            [KeyboardButton(text="‚Ü© –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )

def engine_type_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üõ¢Ô∏è –ë–µ–Ω–∑–∏–Ω–æ–≤—ã–π"), KeyboardButton(text="‚õΩ –î–∏–∑–µ–ª—å–Ω—ã–π")],
            [KeyboardButton(text="üîã –≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π")],
            [KeyboardButton(text="‚Ü© –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
def subscribe_keyboard():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url="https://t.me/auto_v_kitae")],
            [InlineKeyboardButton(text="‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="check_subscription")]
        ]
    )

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª
async def is_subscribed(user_id: int) -> bool:
    try:
        member = await bot.get_chat_member(chat_id=CHANNEL_ID, user_id=user_id)
        return member.status in [
            ChatMemberStatus.MEMBER,
            ChatMemberStatus.ADMINISTRATOR,
            ChatMemberStatus.CREATOR
        ]
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç —Å –¶–ë –†–§ (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥)
def get_currency_rates():
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ XML API –¶–ë –†–§
        url = 'https://www.cbr.ru/scripts/XML_daily.asp'
        today = datetime.now().strftime("%d/%m/%Y")
        params = {'date_req': today}
        
        response = requests.get(url, params=params, timeout=10)
        response.raise_for_status()
        
        root = ET.fromstring(response.content)
        rates = {}
        
        # –ò—â–µ–º –Ω—É–∂–Ω—ã–µ –≤–∞–ª—é—Ç—ã
        for valute in root.findall('Valute'):
            char_code = valute.find('CharCode').text
            if char_code in ['USD', 'EUR', 'CNY']:
                nominal = int(valute.find('Nominal').text)
                value = float(valute.find('Value').text.replace(',', '.'))
                rates[char_code] = value / nominal
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∫—É—Ä—Å—ã –ø–æ–ª—É—á–µ–Ω—ã
        default_rates = {'USD': 80.0, 'EUR': 90.0, 'CNY': 11.0}
        for currency in ['USD', 'EUR', 'CNY']:
            if currency not in rates:
                rates[currency] = default_rates[currency]
                logging.warning(f"–ö—É—Ä—Å {currency} –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        
        return rates
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤: {e}")
        return {'USD': 80.0, 'EUR': 90.0, 'CNY': 11.0}

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ–±—ä–µ–º–æ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è
def parse_engine_volume(input_str):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –≤–≤–æ–¥ –æ–±—ä–µ–º–∞ –¥–≤–∏–≥–∞—Ç–µ–ª—è –≤ –∫—É–±–∏—á–µ—Å–∫–∏–µ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä—ã (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ)"""
    try:
        clean_input = input_str.replace(' ', '').replace(',', '.')
        if '.' in clean_input:
            return int(float(clean_input) * 1000)
        return int(clean_input)
    except:
        return None

def format_engine_volume(volume_cc):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (–∫—É–±.—Å–º –∏ –ª–∏—Ç—Ä—ã)"""
    liters = volume_cc / 1000
    return f"{volume_cc} —Å–º¬≥ ({liters:.1f} –ª)" if liters != int(liters) else f"{volume_cc} —Å–º¬≥ ({int(liters)} –ª)"

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–µ–ª –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
def format_number(value):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —á–∏—Å–ª–æ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏ —Ç—ã—Å—è—á (—Ç–æ—á–∫–∏) –∏ –±–µ–∑ –∫–æ–ø–µ–µ–∫"""
    return "{0:,}".format(int(value)).replace(",", ".")

# –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –†–ê–°–ß–ï–¢ –ü–û–®–õ–ò–ù–´ –î–õ–Ø –†–§ (—Ç–æ—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—É –¢–ö–°)
def calculate_duty(price_rub: float, age_months: int, engine_volume_cc: int, 
                  is_individual: bool, eur_rate: float, is_electric: bool,
                  is_personal_use: bool) -> float:
    """–†–∞—Å—á–µ—Ç —Ç–∞–º–æ–∂–µ–Ω–Ω–æ–π –ø–æ—à–ª–∏–Ω—ã –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –¢–ö–°"""
    
    # –î–ª—è —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª–µ–π –≤—Å–µ–≥–¥–∞ 15%
    if is_electric:
        return price_rub * ELECTRIC_DUTY_RATE
    
    # –î–ª—è –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–≥–æ –≤–≤–æ–∑–∞ (—é—Ä–ª–∏—Ü–∞ –∏–ª–∏ —Ñ–∏–∑–ª–∏—Ü–∞ –¥–ª—è –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–∂–∏)
    if not is_individual or not is_personal_use:
        return price_rub * 0.20  # 20% –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    
    # –î–ª—è —Ñ–∏–∑–ª–∏—Ü (–ª–∏—á–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ)
    if age_months <= 36:  # –î–æ 3 –ª–µ—Ç
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ –µ–≤—Ä–æ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        price_eur = price_rub / eur_rate
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≤ –µ–≤—Ä–æ (–ø–æ—Ä–æ–≥–∏ –∏–∑ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –¢–ö–°)
        if price_eur <= 8500:
            rate_percent = 0.54
            min_rate_eur = 2.5
        elif price_eur <= 16700:
            rate_percent = 0.48
            min_rate_eur = 3.5
        elif price_eur <= 42250:
            rate_percent = 0.48
            min_rate_eur = 5.5
        elif price_eur <= 84500:
            rate_percent = 0.48
            min_rate_eur = 7.5
        elif price_eur <= 169000:
            rate_percent = 0.48
            min_rate_eur = 15
        else:  # > 169000 –µ–≤—Ä–æ
            rate_percent = 0.48
            min_rate_eur = 20
            
        # –ë–µ—Ä–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –¥–≤—É—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
        duty_by_percent = price_rub * rate_percent
        duty_by_volume = min_rate_eur * eur_rate * engine_volume_cc
        return max(duty_by_percent, duty_by_volume)
        
    elif 36 < age_months <= 60:  # 3-5 –ª–µ—Ç
        # –†–∞—Å—á–µ—Ç –ø–æ –æ–±—ä–µ–º—É –¥–≤–∏–≥–∞—Ç–µ–ª—è
        if engine_volume_cc <= 1000:
            eur_per_cc = 1.5
        elif engine_volume_cc <= 1500:
            eur_per_cc = 1.7
        elif engine_volume_cc <= 1800:
            eur_per_cc = 2.5
        elif engine_volume_cc <= 2300:
            eur_per_cc = 2.7
        elif engine_volume_cc <= 3000:
            eur_per_cc = 3.0
        else:
            eur_per_cc = 3.6
        return eur_per_cc * engine_volume_cc * eur_rate
        
    else:  # –°—Ç–∞—Ä—à–µ 5 –ª–µ—Ç
        if engine_volume_cc <= 1000:
            eur_per_cc = 3.0
        elif engine_volume_cc <= 1500:
            eur_per_cc = 3.2
        elif engine_volume_cc <= 1800:
            eur_per_cc = 3.5
        elif engine_volume_cc <= 2300:
            eur_per_cc = 4.8
        elif engine_volume_cc <= 3000:
            eur_per_cc = 5.0
        else:
            eur_per_cc = 5.7
        return eur_per_cc * engine_volume_cc * eur_rate

# –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –†–ê–°–ß–ï–¢ –£–¢–ò–õ–¨–°–ë–û–†–ê (—Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª–µ–π)
def calculate_recycling(age_months: int, engine_volume_cc: int, is_individual: bool, 
                       is_personal_use: bool, is_electric: bool) -> float:
    # –î–ª—è —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª–µ–π
    if is_electric:
        if is_individual and is_personal_use:
            return BASE_RECYCLING_FEE_ELECTRIC_INDIVIDUAL_NEW if age_months <= 36 else BASE_RECYCLING_FEE_ELECTRIC_INDIVIDUAL_OLD
        else:
            return BASE_RECYCLING_FEE_ELECTRIC_LEGAL_NEW if age_months <= 36 else BASE_RECYCLING_FEE_ELECTRIC_LEGAL_OLD
    
    # –î–ª—è –î–í–°
    # –õ—å–≥–æ—Ç–Ω—ã–π —É—Ç–∏–ª—å—Å–±–æ—Ä –¥–ª—è —Ñ–∏–∑–ª–∏—Ü (–ª–∏—á–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∏ –æ–±—ä–µ–º <=3000)
    if is_individual and is_personal_use and engine_volume_cc <= 3000:
        if age_months <= 36:
            return 3400  # –Ω–æ–≤—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å
        else:
            return 5200  # –Ω–µ –Ω–æ–≤—ã–π
            
    # –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ (—é—Ä–ª–∏—Ü–∞, —Ñ–∏–∑–ª–∏—Ü–∞ –¥–ª—è –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–∂–∏, –∏–ª–∏ –æ–±—ä–µ–º>3000) - —Ä–∞—Å—á–µ—Ç –ø–æ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º
    is_new = age_months <= 36  # –ù–æ–≤—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å (–¥–æ 3 –ª–µ—Ç)
    
    if engine_volume_cc <= 1000:
        coefficient = 1.42 if is_new else 5.3
    elif engine_volume_cc <= 2000:
        coefficient = 2.21 if is_new else 8.26
    elif engine_volume_cc <= 3000:
        coefficient = 4.22 if is_new else 16.12
    elif engine_volume_cc <= 3500:
        coefficient = 5.73 if is_new else 28.5
    else:  # > 3500
        coefficient = 9.08 if is_new else 35.01
        
    return BASE_RECYCLING_FEE_LEGAL * coefficient

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –∞–∫—Ü–∏–∑–∞ –î–í–°
def calculate_excise(engine_power_hp: int) -> float:
    """–†–∞—Å—á—ë—Ç –∞–∫—Ü–∏–∑–∞ –¥–ª—è —é—Ä–ª–∏—Ü –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–æ—â–Ω–æ—Å—Ç–∏ –¥–≤–∏–≥–∞—Ç–µ–ª—è (–î–í–°)"""
    return engine_power_hp * BASE_EXCISE_RATE

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –∞–∫—Ü–∏–∑–∞ —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª–µ–π
def calculate_excise_electric(power_hp: int) -> float:
    """–†–∞—Å—á—ë—Ç –∞–∫—Ü–∏–∑–∞ –¥–ª—è —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–æ—â–Ω–æ—Å—Ç–∏ –≤ –ª.—Å."""
    for (min_power, max_power), rate in EXCISE_RATES_ELECTRIC.items():
        if min_power < power_hp <= max_power:
            return power_hp * rate
    return 0

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@dp.message(Command("start"))
async def start(message: types.Message):
    if not await is_subscribed(message.from_user.id):
        await message.answer(
            "üì¢ –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!\n"
            "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è'",
            reply_markup=subscribe_keyboard()
        )
        return
    
    await message.answer(
        "üöó <b>AutoZakazDV Calculator</b>\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∞–≤—Ç–æ –∏–∑ –ö–∏—Ç–∞—è\n\n"
        "–ù–∞–∂–º–∏—Ç–µ START –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã",
        parse_mode="HTML",
        reply_markup=start_keyboard()
    )

@dp.callback_query(lambda c: c.data == "check_subscription")
async def check_subscription(callback_query: types.CallbackQuery):
    if await is_subscribed(callback_query.from_user.id):
        await callback_query.message.delete()
        await callback_query.message.answer(
            "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.\n"
            "–ù–∞–∂–º–∏—Ç–µ START –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.",
            reply_markup=start_keyboard()
        )
    else:
        await callback_query.answer(
            "‚ùå –í—ã –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É.",
            show_alert=True
        )

@dp.message(lambda m: m.text == "START")
async def handle_start(message: types.Message):
    if not await is_subscribed(message.from_user.id):
        await message.answer(
            "üì¢ –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!\n"
            "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è'",
            reply_markup=subscribe_keyboard()
        )
        return
    
    await message.answer(
        "üöó <b>AutoZakazDV Calculator</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode="HTML",
        reply_markup=main_menu()
    )

@dp.message(Command("calculate"))
@dp.message(lambda m: m.text == "üöó –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ")
async def start_calc(message: types.Message, state: FSMContext):
    if not await is_subscribed(message.from_user.id):
        await message.answer(
            "üì¢ –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!\n"
            "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è'",
            reply_markup=subscribe_keyboard()
        )
        return
    
    await state.set_state(Form.price)
    await message.answer(
        "üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è –≤ CNY (–Ω–∞–ø—Ä–∏–º–µ—Ä 150000):",
        reply_markup=ReplyKeyboardRemove()
    )

@dp.message(Form.price)
async def process_price(message: types.Message, state: FSMContext):
    if not await is_subscribed(message.from_user.id):
        await message.answer(
            "üì¢ –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞—Å—á–µ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!\n"
            "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è'",
            reply_markup=subscribe_keyboard()
        )
        return
    
    try:
        price = float(message.text.replace(' ', '').replace(',', '.'))
        if price <= 0: raise ValueError
        await state.update_data(price=price)
        await state.set_state(Form.year_month)
        await message.answer("üìÖ –í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –∏ –º–µ—Å—è—Ü –≤—ã–ø—É—Å–∫–∞ (—Ñ–æ—Ä–º–∞—Ç: –ì–ì–ì–ì.–ú–ú, –Ω–∞–ø—Ä–∏–º–µ—Ä: 2021.05):",
                           reply_markup=ReplyKeyboardRemove())
    except:
        await message.answer("‚ùå –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 86000)",
                           reply_markup=ReplyKeyboardRemove())

@dp.message(Form.year_month)
async def process_year_month(message: types.Message, state: FSMContext):
    if not await is_subscribed(message.from_user.id):
        await message.answer(
            "üì¢ –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞—Å—á–µ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!\n"
            "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è'",
            reply_markup=subscribe_keyboard()
        )
        return
    
    try:
        year, month = map(float, message.text.split('.'))
        current_date = datetime.now()
        
        if not (1990 <= year <= current_date.year) or not (1 <= month <= 12):
            raise ValueError
            
        manufacture_date = datetime(int(year), int(month), 1)
        age_months = (current_date.year - manufacture_date.year) * 12 + (current_date.month - manufacture_date.month)
        
        await state.update_data(year_month=(year, month), age_months=age_months)
        await state.set_state(Form.engine_type)
        await message.answer("üîß –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–≤–∏–≥–∞—Ç–µ–ª—è:", reply_markup=engine_type_keyboard())
    except:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞! –í–≤–µ–¥–∏—Ç–µ –∫–∞–∫ –ì–ì–ì–ì.–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2021.05)",
                           reply_markup=ReplyKeyboardRemove())

@dp.message(Form.engine_type)
async def process_engine_type(message: types.Message, state: FSMContext):
    if not await is_subscribed(message.from_user.id):
        await message.answer(
            "üì¢ –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞—Å—á–µ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!\n"
            "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è'",
            reply_markup=subscribe_keyboard()
        )
        return
    
    engine_types = ["üõ¢Ô∏è –ë–µ–Ω–∑–∏–Ω–æ–≤—ã–π", "‚õΩ –î–∏–∑–µ–ª—å–Ω—ã–π", "üîã –≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π"]
    if message.text not in engine_types:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–≤–∏–≥–∞—Ç–µ–ª—è –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤",
                           reply_markup=engine_type_keyboard())
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –¥–≤–∏–≥–∞—Ç–µ–ª—è
    await state.update_data(engine_type=message.text)
    
    # –î–ª—è –±–µ–Ω–∑–∏–Ω–æ–≤—ã—Ö –∏ –¥–∏–∑–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è
    if message.text in ["üõ¢Ô∏è –ë–µ–Ω–∑–∏–Ω–æ–≤—ã–π", "‚õΩ –î–∏–∑–µ–ª—å–Ω—ã–π"]:
        await state.set_state(Form.engine_volume)
        await message.answer("‚öôÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è –≤ –∫—É–±–∏—á–µ—Å–∫–∏—Ö —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2000) –∏–ª–∏ –≤ –ª–∏—Ç—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2.0):",
                           reply_markup=ReplyKeyboardRemove())
    else:  # –≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π
        await state.set_state(Form.engine_power)
        await message.answer("‚ö° –í–≤–µ–¥–∏—Ç–µ –º–æ—â–Ω–æ—Å—Ç—å –¥–≤–∏–≥–∞—Ç–µ–ª—è –≤ –∫–í—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: 120):",
                           reply_markup=ReplyKeyboardRemove())

@dp.message(Form.engine_volume)
async def process_volume(message: types.Message, state: FSMContext):
    if not await is_subscribed(message.from_user.id):
        await message.answer(
            "üì¢ –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞—Å—á–µ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!\n"
            "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è'",
            reply_markup=subscribe_keyboard()
        )
        return
    
    volume_cc = parse_engine_volume(message.text)
    if volume_cc is None or volume_cc <= 0:
        await message.answer("‚ùå –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –æ–±—ä–µ–º —Ü–∏—Ñ—Ä–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1.6 –∏–ª–∏ 1600)",
                           reply_markup=ReplyKeyboardRemove())
        return
    
    await state.update_data(engine_volume_cc=volume_cc)
    await state.set_state(Form.engine_power)
    await message.answer("‚öôÔ∏è –í–≤–µ–¥–∏—Ç–µ –º–æ—â–Ω–æ—Å—Ç—å –¥–≤–∏–≥–∞—Ç–µ–ª—è –≤ –ª.—Å. (–Ω–∞–ø—Ä–∏–º–µ—Ä: 150):",
                       reply_markup=ReplyKeyboardRemove())

@dp.message(Form.engine_power)
async def process_power(message: types.Message, state: FSMContext):
    if not await is_subscribed(message.from_user.id):
        await message.answer(
            "üì¢ –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞—Å—á–µ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!\n"
            "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è'",
            reply_markup=subscribe_keyboard()
        )
        return
    
    try:
        power = int(message.text)
        if power <= 0: raise ValueError
        await state.update_data(engine_power=power)
        await state.set_state(Form.importer_type)
        await message.answer("üë§ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏–º–ø–æ—Ä—Ç–µ—Ä–∞:", reply_markup=importer_type_keyboard())
    except:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        data = await state.get_data()
        unit = "–∫–í—Ç" if data.get('engine_type') == "üîã –≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π" else "–ª.—Å."
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –º–æ—â–Ω–æ—Å—Ç—å —Ü–∏—Ñ—Ä–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 150) –≤ {unit}",
                           reply_markup=ReplyKeyboardRemove())

@dp.message(Form.importer_type)
async def process_importer_type(message: types.Message, state: FSMContext):
    if not await is_subscribed(message.from_user.id):
        await message.answer(
            "üì¢ –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞—Å—á–µ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!\n"
            "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è'",
            reply_markup=subscribe_keyboard()
        )
        return
    
    if message.text not in ["üë§ –§–∏–∑–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ", "üè¢ –Æ—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ"]:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤",
                           reply_markup=importer_type_keyboard())
        return
    
    is_individual = message.text == "üë§ –§–∏–∑–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ"
    await state.update_data(importer_type=is_individual)
    
    if is_individual:
        await state.set_state(Form.personal_use)
        await message.answer("üéØ –í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è:", reply_markup=personal_use_keyboard())
    else:
        data = await state.get_data()
        await calculate_and_send_result(message, state, data, is_individual, is_personal_use=False)

@dp.message(Form.personal_use)
async def process_personal_use(message: types.Message, state: FSMContext):
    if not await is_subscribed(message.from_user.id):
        await message.answer(
            "üì¢ –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞—Å—á–µ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!\n"
            "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è'",
            reply_markup=subscribe_keyboard()
        )
        return
    
    if message.text not in ["‚úÖ –î–ª—è –ª–∏—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è", "üí∞ –î–ª—è –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–∂–∏"]:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤",
                           reply_markup=personal_use_keyboard())
        return
    
    is_personal_use = message.text == "‚úÖ –î–ª—è –ª–∏—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"
    data = await state.get_data()
    await calculate_and_send_result(message, state, data, is_individual=True, is_personal_use=is_personal_use)

async def calculate_and_send_result(message: types.Message, state: FSMContext, data: dict, is_individual: bool, is_personal_use: bool):
    rates = get_currency_rates()
    price_rub = data['price'] * rates['CNY']
    eur_rate = rates['EUR']
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∞–≤—Ç–æ–º–æ–±–∏–ª—è
    is_electric = data.get('engine_type') == "üîã –≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π"
    
    # –î–ª—è —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª–µ–π —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—ä–µ–º 0
    engine_volume_cc = data.get('engine_volume_cc', 0) if not is_electric else 0
    
    # –î–ª—è —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª–µ–π –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–í—Ç –≤ –ª.—Å. (1 –∫–í—Ç = 1.35962 –ª.—Å.)
    engine_power_hp = data.get('engine_power', 0)
    if is_electric:
        engine_power_hp = engine_power_hp * 1.35962  # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∫–í—Ç –≤ –ª.—Å.
    
    # –†–∞—Å—á–µ—Ç –ø–ª–∞—Ç–µ–∂–µ–π
    duty = calculate_duty(price_rub, data['age_months'], engine_volume_cc, 
                         is_individual, eur_rate, is_electric, is_personal_use)
    
    recycling = calculate_recycling(data['age_months'], engine_volume_cc, 
                                  is_individual, is_personal_use, is_electric)
    
    # –ê–ö–¶–ò–ó: –¥–ª—è —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª–µ–π –≤—Å–µ–≥–¥–∞ (–µ—Å–ª–∏ –º–æ—â–Ω–æ—Å—Ç—å >90 –ª.—Å.), –¥–ª—è –î–í–° —Ç–æ–ª—å–∫–æ –¥–ª—è —é—Ä–ª–∏—Ü
    excise = 0
    if is_electric:
        excise = calculate_excise_electric(engine_power_hp)
    elif not is_individual:  # –î–ª—è –î–í–° —Ç–æ–ª—å–∫–æ —é—Ä–ª–∏—Ü–∞
        excise = calculate_excise(data.get('engine_power', 0))
    
    # –ù–î–° 20% –¥–ª—è —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª–µ–π –≤—Å–µ–≥–¥–∞, –¥–ª—è –î–í–° —Ç–æ–ª—å–∫–æ –¥–ª—è —é—Ä–ª–∏—Ü
    vat_base = price_rub + duty + excise
    vat = vat_base * 0.2 if (is_electric or not is_individual) else 0
    
    total = price_rub + duty + recycling + vat + excise + DELIVERY_COST + CUSTOMS_CLEARANCE
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞
    years = data['age_months'] // 12
    months = data['age_months'] % 12
    age_str = f"{years} –≥. {months} –º–µ—Å." if months else f"{years} –ª–µ—Ç"
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∏–º–ø–æ—Ä—Ç–µ—Ä–∞ –∏ —Ü–µ–ª–∏
    importer_type = "–§–∏–∑–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ" if is_individual else "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ"
    if is_individual:
        purpose = "–ª–∏—á–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ" if is_personal_use else "–ø–µ—Ä–µ–ø—Ä–æ–¥–∞–∂–∞"
        importer_type += f" ({purpose})"
    
    result = (
        f"üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á–µ—Ç–∞</b> (–∞–∫—Ç—É–∞–ª—å–Ω–æ –Ω–∞ {datetime.now().strftime('%d.%m.%Y')}):\n\n"
        f"üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ:</b> {format_number(data['price'])} CNY ({format_number(price_rub)} —Ä—É–±.)\n"
        f"üìà <b>–ö—É—Ä—Å—ã:</b> CNY: {rates['CNY']:.2f} —Ä—É–±., EUR: {rates['EUR']:.2f} —Ä—É–±.\n"
        f"‚è≥ <b>–î–∞—Ç–∞ –≤—ã–ø—É—Å–∫–∞:</b> {data['year_month'][0]:.0f}.{data['year_month'][1]:.0f} ({age_str})\n"
        f"üîã <b>–¢–∏–ø –¥–≤–∏–≥–∞—Ç–µ–ª—è:</b> {data['engine_type']}\n"
    )
    
    # –î–û–ë–ê–í–õ–Ø–ï–ú –û–ë–™–ï–ú –î–õ–Ø –î–í–° –ò–õ–ò –ú–û–©–ù–û–°–¢–¨ –î–õ–Ø –≠–õ–ï–ö–¢–†–û–ú–û–ë–ò–õ–ï–ô
    if data['engine_type'] in ["üõ¢Ô∏è –ë–µ–Ω–∑–∏–Ω–æ–≤—ã–π", "‚õΩ –î–∏–∑–µ–ª—å–Ω—ã–π"]:
        result += f"üîß <b>–û–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è:</b> {format_engine_volume(engine_volume_cc)}\n"
        result += f"‚ö° <b>–ú–æ—â–Ω–æ—Å—Ç—å –¥–≤–∏–≥–∞—Ç–µ–ª—è:</b> {data.get('engine_power', 0)} –ª.—Å.\n"
    else:  # –≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π
        result += f"‚ö° <b>–ú–æ—â–Ω–æ—Å—Ç—å –¥–≤–∏–≥–∞—Ç–µ–ª—è:</b> {data.get('engine_power', 0)} –∫–í—Ç ({engine_power_hp:.1f} –ª.—Å.)\n"
    
    result += f"üë§ <b>–ò–º–ø–æ—Ä—Ç–µ—Ä:</b> {importer_type}\n\n"
    result += f"üìù <b>–¢–∞–º–æ–∂–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏:</b>\n"
    result += f"- –ü–æ—à–ª–∏–Ω–∞: {format_number(duty)} —Ä—É–±.\n"
    
    # –î–û–ë–ê–í–õ–Ø–ï–ú –ê–ö–¶–ò–ó –î–õ–Ø –≠–õ–ï–ö–¢–†–û–ú–û–ë–ò–õ–ï–ô (–í–°–ï–ì–î–ê –ï–°–õ–ò >0)
    if is_electric and excise > 0:
        result += f"- –ê–∫—Ü–∏–∑: {format_number(excise)} —Ä—É–±. (–º–æ—â–Ω–æ—Å—Ç—å {engine_power_hp:.1f} –ª.—Å.)\n"
    # –î–ª—è –î–í–° –∞–∫—Ü–∏–∑ —Ç–æ–ª—å–∫–æ –¥–ª—è —é—Ä–ª–∏—Ü
    elif not is_electric and not is_individual and excise > 0:
        result += f"- –ê–∫—Ü–∏–∑: {format_number(excise)} —Ä—É–±.\n"
    
    # –ù–î–° –î–õ–Ø –≠–õ–ï–ö–¢–†–û–ú–û–ë–ò–õ–ï–ô –í–°–ï–ì–î–ê, –î–õ–Ø –î–í–° –¢–û–õ–¨–ö–û –î–õ–Ø –Æ–†–õ–ò–¶
    if vat > 0:
        result += f"- –ù–î–° (20%): {format_number(vat)} —Ä—É–±.\n"
    
    result += f"- –£—Ç–∏–ª—å—Å–±–æ—Ä: {format_number(recycling)} —Ä—É–±.\n"
    
    result += (
        f"\nüöö <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:</b>\n"
        f"- –î–æ—Å—Ç–∞–≤–∫–∞ –¥–æ –£—Å—Å—É—Ä–∏–π—Å–∫–∞: {format_number(DELIVERY_COST)} —Ä—É–±.\n"
        f"- –¢–∞–º–æ–∂–µ–Ω–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ: {format_number(CUSTOMS_CLEARANCE)} —Ä—É–±.\n\n"
        f"üíµ <b>–ò–¢–û–ì–û –∫ –æ–ø–ª–∞—Ç–µ:</b> {format_number(total)} —Ä—É–±.\n\n"
        f"<a href='{SITE_URL}'>–° —É–≤–∞–∂–µ–Ω–∏–µ–º, –ê–≤—Ç–æ –ó–∞–∫–∞–∑ –î–í</a>\n\n"
        f"<a href='{TELEGRAM_URL}'>üì© –ó–∞–∫–∞–∑–∞—Ç—å –∞–≤—Ç–æ</a>\n"
        f"<a href='{GUAZI_URL}'>üîç –ü–æ–∏—Å–∫ –∞–≤—Ç–æ –Ω–∞ Guazi.com</a>"
    )
    
    # –î–û–ë–ê–í–õ–Ø–ï–ú –ü–†–ò–ú–ï–ß–ê–ù–ò–Ø
    if is_electric and is_individual and is_personal_use:
        result += "\n\n‚ÑπÔ∏è <i>–î–ª—è —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª–µ–π —Ñ–∏–∑–ª–∏—Ü: –ª—å–≥–æ—Ç–Ω—ã–π —É—Ç–∏–ª—å—Å–±–æ—Ä –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –ø—Ä–∏ —É—Å–ª–æ–≤–∏—è—Ö: "
        result += "1 –∞–≤—Ç–æ –≤ –≥–æ–¥, –±–µ–∑ –ø—Ä–æ–¥–∞–∂–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 12 –º–µ—Å—è—Ü–µ–≤</i>"
    elif is_electric:
        result += "\n\n‚ÑπÔ∏è <i>–î–ª—è —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª–µ–π: –∞–∫—Ü–∏–∑ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –º–æ—â–Ω–æ—Å—Ç–∏ >90 –ª.—Å., –ù–î–° 20% –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –≤—Å–µ—Ö</i>"
    elif not is_individual:
        result += "\n\n‚ÑπÔ∏è <i>–î–ª—è –î–í–° —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –ª–∏—Ü: —É—á—Ç–µ–Ω—ã –ø–æ—à–ª–∏–Ω–∞, –∞–∫—Ü–∏–∑, –ù–î–° –∏ —É—Ç–∏–ª—å—Å–±–æ—Ä</i>"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é —á–∞—Å—Ç—å
    await message.answer(result, parse_mode="HTML", reply_markup=main_menu())
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–∞–π—Ç–∞ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –ø–æ–¥–ø–∏—Å—å)
    site_info = (
        "–° —É–≤–∞–∂–µ–Ω–∏–µ–º, –ê–≤—Ç–æ –ó–∞–∫–∞–∑ –î–í\n\n"
        f"<a href='{TELEGRAM_URL}'>- –ó–∞–∫–∞–∑–∞—Ç—å –∞–≤—Ç–æ</a>\n"
        f"<a href='{SITE_URL}'>autozakaz-dv.ru</a>\n"
        "–ì–ª–∞–≤–Ω–∞—è"
    )
    
    await message.answer_photo(
        photo=SITE_IMAGE_URL,
        caption=site_info,
        parse_mode="HTML"
    )
    
    await state.clear()

@dp.message(lambda m: m.text == "üìä –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç")
async def show_rates(message: types.Message):
    if not await is_subscribed(message.from_user.id):
        await message.answer(
            "üì¢ –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!\n"
            "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è'",
            reply_markup=subscribe_keyboard()
        )
        return
    
    rates = get_currency_rates()
    await message.answer(
        f"üìä <b>–¢–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã –¶–ë –†–§</b>:\n\n"
        f"üá∫üá∏ USD: {rates['USD']:.2f} —Ä—É–±.\n"
        f"üá™üá∫ EUR: {rates['EUR']:.2f} —Ä—É–±.\n"
        f"üá®üá≥ CNY: {rates['CNY']:.2f} —Ä—É–±.\n\n"
        f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%d.%m.%Y %H:%M')}",
        parse_mode="HTML",
        reply_markup=main_menu()
    )

@dp.message(lambda m: m.text == "‚ÑπÔ∏è –û –±–æ—Ç–µ")
async def about(message: types.Message):
    if not await is_subscribed(message.from_user.id):
        await message.answer(
            "üì¢ –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!\n"
            "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è'",
            reply_markup=subscribe_keyboard()
        )
        return
    
    await message.answer(
        f"ü§ñ <b>AutoZakazDV Calculator Bot</b>\n\n"
        f"–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞—Å—Ç–∞–º–æ–∂–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –∏–∑ –ö–∏—Ç–∞—è.\n\n"
        f"<a href='{SITE_URL}'>üåê –°–∞–π—Ç –∫–æ–º–ø–∞–Ω–∏–∏</a>\n"
        f"<a href='{TELEGRAM_URL}'>üìû –ù–∞—à Telegram</a>\n"
        f"<a href='{GUAZI_URL}'>üöó –ü–æ–∏—Å–∫ –∞–≤—Ç–æ –Ω–∞ Guazi.com</a>\n\n"
        f"–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞—Å—á–µ—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ START",
        parse_mode="HTML",
        reply_markup=main_menu()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–∏—Å—Ç–∫–∏ —á–∞—Ç–∞
@dp.message(lambda m: m.text == "–û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç" or m.text == "/clean")
async def handle_clear_chat(message: types.Message):
    await message.answer(
        "–ß–∞—Ç –æ—á–∏—â–µ–Ω. –ù–∞–∂–º–∏—Ç–µ START –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.",
        reply_markup=start_keyboard()
    )

@dp.message()
async def handle_unknown(message: types.Message):
    if not await is_subscribed(message.from_user.id):
        await message.answer(
            "üì¢ –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!\n"
            "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è'",
            reply_markup=subscribe_keyboard()
        )
        return
    
    await message.answer(
        "–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ù–∞–∂–º–∏—Ç–µ START –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.",
        reply_markup=ReplyKeyboardRemove()
    )

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())